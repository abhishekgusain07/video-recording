Why are we using reacy-query ?
usequery -> get data with queryKey
useMutationState -> get the latest optimistic data that was sent into the mutate function when it was called using 

useMutation -> A hook in React Query that allows you to perform mutations (create, update, delete operations) on data. It provides a way to manage the state of the mutation, including loading, error, and success states, and can be used to trigger side effects after the mutation is completed.

==========================================


What is hydrationboundary, when it is used?
The HydrationBoundary component is used in React Query to manage the hydration process of queries when transitioning from server-rendered content to client-rendered content. It is particularly useful in applications that utilize Server Components and need to handle data fetching and synchronization between the server and client.

Here are some key points on when and why to use HydrationBoundary:

Concurrent Features and Transitions: HydrationBoundary supports concurrent features and transitions by ensuring that queries are properly hydrated. This means that the data fetched on the server is available on the client without needing to refetch, which can improve performance and user experience.

Query Hydration: The HydrationBoundary component is responsible for hydrating queries, not mutations. This means it ensures that the data fetched during server-side rendering is available on the client side, allowing for a seamless transition and avoiding unnecessary data fetching.

Avoiding Flash of Old Data: By using HydrationBoundary, you can prevent a flash of old data when navigating between pages. This is because it hydrates queries in an effect, ensuring that the freshest data is used without prematurely updating content before a page transition is fully committed.

Technical Changes: The timing of when queries are hydrated has changed slightly with the introduction of HydrationBoundary. New queries are hydrated during the render phase, while existing queries in the cache are hydrated in an effect, as long as their data is fresher than the cached data.

Overall, HydrationBoundary helps in managing the synchronization of data between server and client, ensuring that the client has access to the most up-to-date data without unnecessary refetching, thus improving the efficiency and performance of your application.
========================================

======= USE-CREATE-WORKSPACE=======
the flow of use-create-workspace with useform hook whcih uses react-hook-form under the hood, with zod validation


The flow works like this:

When a component uses useCreateWorkspace, it gets:

register: Function to register form fields with React Hook Form
onFormSubmit: Submit handler that validates and processes the form
errors: Any validation errors from Zod
isPending: Loading state during mutation


When the form is submitted:

Data is validated against the Zod schema
If valid, the mutation is called with the form data
The mutation creates a workspace in the database
The "user-workspaces" cache is invalidated to refresh the data
==========================================

====== useMutationState =================
1. using for optimistic ui updates here, generally it give access to all the mutation happening or happened in our application, so while loading folders or changing name, we can update the ui optimisitically, so that user sees the instant changes reflected in ui, and if the mutation fails in backend we can revert back to the original mutation data.

https://tanstack.com/query/latest/docs/framework/react/reference/useMutationState

